#include<stdio.h>
int main() 
{ 
	int Sr=7,Dr=5; // Number of process
	printf("Please Enter number of process and resources:	");
	scanf("%d%d",&Sr,&Dr);
	const int S=Sr,D=Dr; // Available resource
    int avail[20];
    printf("Please Enter number of available resources:	");
	for(int i=0;i<D;i++)
	{
		scanf("%d",&avail[i]);
	}
    int maxm[10][10];
    for(int i=0;i<S;i++)
	{
		printf("Enter maximum required resources for S%d:	",i+1);
		for(int j=0;j<D;j++)
		{
			scanf("%d",&maxm[i][j]);
		}
	}
	 // Allocated Resource to process
    int allot[10][10];   
    for(int i=0;i<S;i++)
	{
		printf("Enter resources allocated by S%d:	",i+1);
		for(int j=0;j<D;j++)
		{
		
			scanf("%d",&allot[i][j]);
		}
	}
// Required Resource
   int need[S][D]; 
  
    // Calculating Need(Required Resource by Process)
	for (int i = 0 ; i < S ; i++) 
        for (int j = 0 ; j < D ; j++) 
   
            need[i][j] = maxm[i][j] - allot[i][j];
	    // Mark all process as not finished
	  bool finish[S] = {0}; 
    int safeSeq[S]; 
   
    int work[D]; 
    for (int i = 0; i < D ; i++) 
        work[i] = avail[i]; 
  
    int count = 0; 
	while (count < S) 
    {  
        bool found = false; 
        for (int s = 0; s < S; s++) 
        { 
            if (finish[s] == 0) 
            { 
                int j; 
                for (j = 0; j < D; j++) 
                    if (need[s][j] > work[j]) 
                        break; 
   
                // If all needs of S were satisfied
				if (j == D) 
                { 
                    for (int k = 0 ; k < D ; k++) 
                        work[k] += allot[s][k]; 
   
// Add this process to safe sequence
					safeSeq[count++] = s; 
  
                    finish[s] = 1; 
  
                    found = true; 
                } 
            } 
        }
        // If we could not find a next process in safe sequence
		if (found == false) 
        { 
            printf("System is not in safe");  
        } 
    } 
  
